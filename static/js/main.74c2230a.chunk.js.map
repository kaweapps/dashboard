{"version":3,"sources":["chartconfigs/data.js","components/View.js","container/App.js","serviceWorker.js","index.js"],"names":["chartData","chartConfigs","chart","caption","subCaption","xAxisName","yAxisName","numberSuffix","theme","data","label","value","dataSource","yaxisname","subcaption","numbersuffix","rotatelabels","setadaptiveymin","uv","monthNames","d","Date","days","getFullYear","getMonth","getDate","c","i","Number","date","dd","substring","push","getLastSevendays","pieSource","plottooltext","showlegend","showpercentvalues","legendposition","usedataplotcolorforlabels","dSource","defaultcenterlabel","aligncaptionwithcanvas","captionpadding","decimals","centerlabel","ReactFC","fcRoot","FusionCharts","Charts","FusionTheme","View","className","id","Card","style","width","Body","type","height","dataFormat","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74c2230a.chunk.js","sourcesContent":["let chartData = [];\nexport const getLastSevendays = () => {\n  const uv = [20000, 40000, 30000, 10000, 50000, 60000, 70000, 10000];\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n \n  const d = new Date();\n  const days = new Date(d.getFullYear(), d.getMonth() + 1, d.getDate()).getDate();\n  const start = Number(days) - 7;\n  let c = 0;\n\n  for(let i = start; i < days; i++) {\n    let date = new Date(d.getFullYear(), d.getMonth(), i);\n    const dd = monthNames[date.getMonth()].substring(0, 3) + \" \" + date.getDate(); \n    chartData.push({\n      label : dd,\n      value : uv[c]\n    })\n\n    c++;\n  }\n\n  return chartData;\n}\n\nexport const chartConfigs = {\n    chart: {\n      caption: \"Users By Country\",\n      subCaption: \"\",\n      xAxisName: \"Country\",\n      yAxisName: \"Users\",\n      numberSuffix: \"\",\n      theme: \"fusion\"\n    },\n    // Chart Data\n    data:  [\n  {\n    label: \"Venezuela\",\n    value: \"29000\"\n  },\n  {\n    label: \"Saudi\",\n    value: \"30000\"\n  },\n  {\n    label: \"Canada\",\n    value: \"180000\"\n  },\n  {\n    label: \"Iraq\",\n    value: \"140000\"\n  },\n  {\n    label: \"Russia\",\n    value: \"115000\"\n  },\n  {\n    label: \"U.K\",\n    value: \"100000\"\n  },\n  {\n    label: \"U.S.A\",\n    value: \"300000\"\n  },\n  {\n    label: \"China\",\n    value: \"30000\"\n  }\n]\n  }\n\nexport const dataSource = {\n  chart: {\n    caption: \"Impression for the last seven days\",\n    yaxisname: \"Impression\",\n    subcaption: \"\",\n    numbersuffix: \"\",\n    rotatelabels: \"1\",\n    setadaptiveymin: \"1\",\n    theme: \"fusion\"\n  },\n  data: getLastSevendays()\n};\n\n\nexport const pieSource = {\n  chart: {\n    caption: \"Device Type\",\n    plottooltext: \"\",\n    showlegend: \"1\",\n    showpercentvalues: \"1\",\n    legendposition: \"bottom\",\n    usedataplotcolorforlabels: \"1\",\n    theme: \"fusion\"\n  },\n  data: [\n    {\n      label: \"Tablet\",\n      value: \"32647479\"\n    },\n    {\n      label: \"Mobile Phones\",\n      value: \"22100932\"\n    },\n    {\n      label: \"Others\",\n      value: \"14376\"\n    },\n    {\n      label: \"Desktop\",\n      value: \"18674221\"\n    }\n  ]\n};\n\nexport const dSource = {\n  chart: {\n    caption: \"Android Distribution for our app\",\n    subcaption: \"For all users in \" + new Date().getFullYear(),\n    showpercentvalues: \"1\",\n    defaultcenterlabel: \"Android Distribution\",\n    aligncaptionwithcanvas: \"0\",\n    captionpadding: \"0\",\n    decimals: \"1\",\n    plottooltext:\n      \"<b>$percentValue</b> of our Android users are on <b>$label</b>\",\n    centerlabel: \"# Users: $value\",\n    theme: \"fusion\"\n  },\n  data: [\n    {\n      label: \"Ice Cream Sandwich\",\n      value: \"1000\"\n    },\n    {\n      label: \"Jelly Bean\",\n      value: \"5300\"\n    },\n    {\n      label: \"Kitkat\",\n      value: \"10500\"\n    },\n    {\n      label: \"Lollipop\",\n      value: \"18900\"\n    },\n    {\n      label: \"Marshmallow\",\n      value: \"17904\"\n    }\n  ]\n};\n\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'tachyons';\nimport { chartConfigs, dataSource, pieSource, dSource } from '../chartconfigs/data';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nimport Card from 'react-bootstrap/Card'\nimport ReactFusioncharts from \"react-fusioncharts\";\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nclass View extends Component {\n\nrender() {\n\treturn (\n\t\t\t<div>\n\t\t\t <div className=\"container-fluid\">\n                    <div className=\"row flex-xl-nowrap\">\n                   \n                        <div id=\"content-body\" className=\"col-12\">\n                            {/* <!-- heading row --> */}\n                            <div className=\"row\">\n                                <div className=\"col-md-12 courier tc \"><h2>Web And Mobile App Dashboard</h2></div>\n                            </div>\n                          \n                            <div className=\"row mt-3 \">\n                                <div id=\"parent1\" className=\"col-lg-6 tc\">\n                        \t    \t<Card style={{ width: '100%' }}>\n\t\t\t\t\t\t\t  \t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t    <ReactFusioncharts\n\t\t\t\t\t\t\t\t\t        type=\"column2d\"\n\t\t\t\t\t\t\t\t\t        width=\"500\"\n\t\t\t\t\t\t\t\t\t        height=\"400\"\n\t\t\t\t\t\t\t\t\t        dataFormat=\"JSON\"\n\t\t\t\t\t\t\t\t\t        dataSource={chartConfigs}\n\t\t\t\t\t\t\t\t      \t/>\n\t\t\t\t\t\t\t \t\t </Card.Body>\n\t\t\t\t\t\t\t\t\t </Card>\n                                </div>\n\n                                <div id=\"parent2\" className=\"col-lg-6 tc\">\n                        \t    \t<Card style={{ width: '100%' }}>\n\t\t\t\t\t\t\t  \t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t    <ReactFusioncharts\n\t\t\t\t\t\t\t\t\t        type=\"line\"\n\t\t\t\t\t\t\t\t\t        width=\"500\"\n\t\t\t\t\t\t\t\t\t        height=\"400\"\n\t\t\t\t\t\t\t\t\t        dataFormat=\"JSON\"\n\t\t\t\t\t\t\t\t\t        dataSource={dataSource}\n\t\t\t\t\t\t\t\t      \t/>\n\t\t\t\t\t\t\t\t      \t\n\t\t\t\t\t\t\t \t\t </Card.Body>\n\t\t\t\t\t\t\t\t\t </Card>\n\t\t\t\t\t\t\t\t </div>\n                                \n                                <div id=\"parent3\" className=\"col-lg-6 tc\">\n                                    <Card style={{ width: '100%' }}>\n\t\t\t\t\t\t\t\t  \t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t\t    <ReactFusioncharts\n\t\t\t\t\t\t\t\t\t\t        type=\"pie2d\"\n\t\t\t\t\t\t\t\t\t\t        width=\"500\"\n\t\t\t\t\t\t\t\t\t\t        height=\"400\"\n\t\t\t\t\t\t\t\t\t\t        dataFormat=\"JSON\"\n\t\t\t\t\t\t\t\t\t\t        dataSource={pieSource}\n\t\t\t\t\t\t\t\t\t      \t/>\n\t\t\t\t\t\t\t\t \t\t </Card.Body>\n\t\t\t\t\t\t\t\t\t </Card>\n                                </div>\n\n                                <div id=\"parent4\" className=\"col-lg-6 tc\">\n                                <Card style={{ width: '100%' }}>\n\t\t\t\t\t\t\t  \t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t    <ReactFusioncharts\n\t\t\t\t\t\t\t\t\t        type=\"doughnut2d\"\n\t\t\t\t\t\t\t\t\t        width=\"500\"\n\t\t\t\t\t\t\t\t\t        height=\"400\"\n\t\t\t\t\t\t\t\t\t        dataFormat=\"JSON\"\n\t\t\t\t\t\t\t\t\t        dataSource={dSource}\n\t\t\t\t\t\t\t\t      />\t\n\t\t\t\t\t\t\t \t\t </Card.Body>\n\t\t\t\t\t\t\t\t\t </Card>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\t)\n}\n}\n\nexport default View;","import React, {Component} from 'react';\nimport View from '../components/View';\nimport 'tachyons';\n\nconst App = () =>{\n     return (   \n      <View/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}